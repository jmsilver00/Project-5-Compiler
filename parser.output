Terminals unused in grammar

    RETURN
    KEYWORD
    SINGLE_QOUTE
    COMMA
    LHS


Rules useless in parser due to conflicts

   11 FunDeclList: FunDecl

   18 ParamDeclList: ParamDecl

   20 ParamDecl: %empty

   50 ConditionBlock: %empty

   64 else_ConditionBlock: %empty


State 0 conflicts: 6 shift/reduce
State 9 conflicts: 6 shift/reduce, 1 reduce/reduce
State 11 conflicts: 1 shift/reduce, 8 reduce/reduce
State 13 conflicts: 1 shift/reduce
State 15 conflicts: 1 shift/reduce
State 17 conflicts: 1 shift/reduce
State 21 conflicts: 4 shift/reduce
State 23 conflicts: 1 shift/reduce
State 25 conflicts: 1 shift/reduce
State 27 conflicts: 2 shift/reduce
State 29 conflicts: 1 shift/reduce, 1 reduce/reduce
State 56 conflicts: 1 shift/reduce
State 61 conflicts: 1 shift/reduce, 2 reduce/reduce
State 73 conflicts: 1 shift/reduce, 1 reduce/reduce
State 112 conflicts: 1 reduce/reduce
State 118 conflicts: 2 shift/reduce
State 143 conflicts: 2 shift/reduce
State 160 conflicts: 1 reduce/reduce
State 206 conflicts: 1 reduce/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: Decl DeclList
    3         | Decl

    4 Decl: FunDeclList
    5     | ConditionList
    6     | StmtList
    7     | VarDecl
    8     | ArrayDecl

    9 FunDeclList: %empty
   10            | FunDecl FunDeclList
   11            | FunDecl

   12 FunDecl: TYPE ID LPAREN ParamDeclList RPAREN Block

   13 FuncallStmtList: FuncallStmt FuncallStmtList
   14                | FuncallStmt

   15 FuncallStmt: ID LPAREN ParamDeclList RPAREN SEMICOLON

   16 ParamDeclList: %empty
   17              | ParamDecl ParamDeclList
   18              | ParamDecl

   19 ParamDecl: TYPE ID
   20          | %empty

   21 Block: LBRACE FunBlock RBRACE

   22 FunBlock: ArrayDeclList
   23         | VarDeclList
   24         | StmtList

   25 LogicalOp: LEQ
   26          | GEQ
   27          | EQ EQ
   28          | GTR
   29          | LSS
   30          | OR

   31 ConditionList: Condition ConditionList
   32              | Condition

   33 Condition: IF SUB ELSE LPAREN if_else_Condition_Stmt RPAREN LBRACE ConditionBlock RBRACE ELSE LBRACE else_ConditionBlock RBRACE SEMICOLON
   34          | IF LPAREN ConditionStmt RPAREN LBRACE ConditionBlock RBRACE SEMICOLON

   35 if_else_Condition_Stmt: %empty
   36                       | NUMBER LogicalOp NUMBER
   37                       | ID LogicalOp ID
   38                       | ID LogicalOp NUMBER
   39                       | NUMBER LogicalOp ID

   40 ConditionStmt: %empty
   41              | NUMBER LogicalOp NUMBER
   42              | ID LogicalOp ID
   43              | ID LogicalOp NUMBER
   44              | NUMBER LogicalOp ID

   45 ConditionBlock: stmt_list_for_if
   46               | FunDeclList
   47               | ConditionList
   48               | VarDeclList
   49               | ArrayDeclList
   50               | %empty

   51 stmt_list_for_if: stmt_for_if stmt_list_for_if
   52                 | stmt_for_if

   53 stmt_for_if: AssignStmtList
   54            | MathStatList
   55            | Write_stmt_for_ifs
   56            | FuncallStmtList

   57 Write_stmt_for_ifs: WRITE ID SEMICOLON
   58                   | WRITE ID LBRACKET NUMBER RBRACKET SEMICOLON

   59 else_ConditionBlock: stmt_list_for_else
   60                    | FunDeclList
   61                    | ConditionList
   62                    | VarDeclList
   63                    | ArrayDeclList
   64                    | %empty

   65 stmt_list_for_else: stmt_list_for_else stmt_for_else
   66                   | stmt_for_else

   67 stmt_for_else: AssignStmtList
   68              | MathStatList
   69              | Write_stmt_for_else
   70              | FuncallStmtList

   71 Write_stmt_for_else: WRITE ID SEMICOLON
   72                    | WRITE ID LBRACKET NUMBER RBRACKET SEMICOLON

   73 WhileLogicalOp: GTR
   74               | GEQ
   75               | EQ EQ
   76               | LSS
   77               | OR

   78 WhileConditionList: WhileCondition WhileConditionList
   79                   | WhileCondition

   80 WhileCondition: WHILE LPAREN The_while_condition RPAREN LBRACE WhileBlock1 WhileBlock2 WhileBlock3 RBRACE

   81 The_while_condition: ID WhileLogicalOp ID

   82 WhileBinOp: ADD
   83           | SUB
   84           | MULTIPLY
   85           | DIV

   86 WhileBlock1: ID EQ ID WhileBinOp ID SEMICOLON
   87            | ID EQ ID WhileBinOp NUMBER SEMICOLON
   88            | WRITE ID SEMICOLON
   89            | %empty

   90 WhileBlock2: ID EQ ID WhileBinOp ID SEMICOLON
   91            | ID EQ ID WhileBinOp NUMBER SEMICOLON
   92            | WRITE ID SEMICOLON
   93            | %empty

   94 WhileBlock3: ID EQ ID WhileBinOp ID SEMICOLON
   95            | ID EQ ID WhileBinOp NUMBER SEMICOLON
   96            | WRITE ID SEMICOLON
   97            | %empty

   98 VarDeclList: VarDecl VarDeclList
   99            | VarDecl

  100 VarDecl: TYPE ID SEMICOLON

  101 ArrayDeclList: ArrayDecl ArrayDeclList
  102              | ArrayDecl

  103 ArrayDecl: TYPE ID LBRACKET NUMBER RBRACKET SEMICOLON

  104 StmtList: Stmt StmtList
  105         | Stmt

  106 Stmt: AssignStmtList
  107     | MathStatList
  108     | WriteStmtList
  109     | FuncallStmtList
  110     | WhileConditionList

  111 AssignStmtList: AssignStmt AssignStmtList
  112               | AssignStmt

  113 AssignStmt: ID LBRACKET NUMBER RBRACKET EQ NUMBER SEMICOLON
  114           | ID LBRACKET NUMBER RBRACKET EQ CHAR SEMICOLON
  115           | ID EQ CHAR SEMICOLON
  116           | ID EQ NUMBER SEMICOLON
  117           | ID EQ MathStat SEMICOLON

  118 WriteStmtList: WriteStmt WriteStmtList
  119              | WriteStmt

  120 WriteStmt: WRITE ID SEMICOLON
  121          | WRITE ID LBRACKET NUMBER RBRACKET SEMICOLON

  122 BinOp: ADD
  123      | SUB
  124      | MULTIPLY
  125      | DIV

  126 MathStatList: MathStat MathStatList
  127             | MathStat

  128 MathStat: NUMBER BinOp MathStat
  129         | ID BinOp MathStat
  130         | NUMBER
  131         | ID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <string> (258) 12 15 19 37 38 39 42 43 44 57 58 71 72 81 86 87 88 90 91 92 94 95 96 100 103 113 114 115 116 117 120 121 129 131
    WRITE <string> (259) 57 58 71 72 88 92 96 120 121
    IF <string> (260) 33 34
    ELSE <string> (261) 33
    WHILE <string> (262) 80
    RETURN <string> (263)
    TYPE <string> (264) 12 19 100 103
    KEYWORD <string> (265)
    NUMBER <string> (266) 36 38 39 41 43 44 58 72 87 91 95 103 113 114 116 121 128 130
    CHAR <string> (267) 114 115
    SINGLE_QOUTE <string> (268)
    SEMICOLON <string> (269) 15 33 34 57 58 71 72 86 87 88 90 91 92 94 95 96 100 103 113 114 115 116 117 120 121
    COMMA <string> (270)
    EQ <string> (271) 27 75 86 87 90 91 94 95 113 114 115 116 117
    OR <string> (272) 30 77
    LSS <string> (273) 29 76
    GTR <string> (274) 28 73
    LHS <string> (275)
    LEQ <string> (276) 25
    GEQ <string> (277) 26 74
    LPAREN <string> (278) 12 15 33 34 80
    RPAREN <string> (279) 12 15 33 34 80
    LBRACE <string> (280) 21 33 34 80
    RBRACE <string> (281) 21 33 34 80
    LBRACKET <string> (282) 58 72 103 113 114 121
    RBRACKET <string> (283) 58 72 103 113 114 121
    ADD <string> (284) 82 122
    SUB <string> (285) 33 83 123
    MULTIPLY <string> (286) 84 124
    DIV <string> (287) 85 125


Nonterminals, with rules where they appear

    $accept (33)
        on left: 0
    Program <ast> (34)
        on left: 1
        on right: 0
    DeclList <ast> (35)
        on left: 2 3
        on right: 1 2
    Decl <ast> (36)
        on left: 4 5 6 7 8
        on right: 2 3
    FunDeclList <ast> (37)
        on left: 9 10 11
        on right: 4 10 46 60
    FunDecl <ast> (38)
        on left: 12
        on right: 10 11
    FuncallStmtList <ast> (39)
        on left: 13 14
        on right: 13 56 70 109
    FuncallStmt <ast> (40)
        on left: 15
        on right: 13 14
    ParamDeclList <ast> (41)
        on left: 16 17 18
        on right: 12 15 17
    ParamDecl <ast> (42)
        on left: 19 20
        on right: 17 18
    Block <ast> (43)
        on left: 21
        on right: 12
    FunBlock (44)
        on left: 22 23 24
        on right: 21
    LogicalOp <ast> (45)
        on left: 25 26 27 28 29 30
        on right: 36 37 38 39 41 42 43 44
    ConditionList <ast> (46)
        on left: 31 32
        on right: 5 31 47 61
    Condition <ast> (47)
        on left: 33 34
        on right: 31 32
    if_else_Condition_Stmt <ast> (48)
        on left: 35 36 37 38 39
        on right: 33
    ConditionStmt <ast> (49)
        on left: 40 41 42 43 44
        on right: 34
    ConditionBlock <ast> (50)
        on left: 45 46 47 48 49 50
        on right: 33 34
    stmt_list_for_if <ast> (51)
        on left: 51 52
        on right: 45 51
    stmt_for_if <ast> (52)
        on left: 53 54 55 56
        on right: 51 52
    Write_stmt_for_ifs <ast> (53)
        on left: 57 58
        on right: 55
    else_ConditionBlock <ast> (54)
        on left: 59 60 61 62 63 64
        on right: 33
    stmt_list_for_else <ast> (55)
        on left: 65 66
        on right: 59 65
    stmt_for_else <ast> (56)
        on left: 67 68 69 70
        on right: 65 66
    Write_stmt_for_else <ast> (57)
        on left: 71 72
        on right: 69
    WhileLogicalOp <ast> (58)
        on left: 73 74 75 76 77
        on right: 81
    WhileConditionList <ast> (59)
        on left: 78 79
        on right: 78 110
    WhileCondition <ast> (60)
        on left: 80
        on right: 78 79
    The_while_condition <ast> (61)
        on left: 81
        on right: 80
    WhileBinOp <ast> (62)
        on left: 82 83 84 85
        on right: 86 87 90 91 94 95
    WhileBlock1 <ast> (63)
        on left: 86 87 88 89
        on right: 80
    WhileBlock2 <ast> (64)
        on left: 90 91 92 93
        on right: 80
    WhileBlock3 <ast> (65)
        on left: 94 95 96 97
        on right: 80
    VarDeclList <ast> (66)
        on left: 98 99
        on right: 23 48 62 98
    VarDecl <ast> (67)
        on left: 100
        on right: 7 98 99
    ArrayDeclList <ast> (68)
        on left: 101 102
        on right: 22 49 63 101
    ArrayDecl <ast> (69)
        on left: 103
        on right: 8 101 102
    StmtList <ast> (70)
        on left: 104 105
        on right: 6 24 104
    Stmt <ast> (71)
        on left: 106 107 108 109 110
        on right: 104 105
    AssignStmtList <ast> (72)
        on left: 111 112
        on right: 53 67 106 111
    AssignStmt <ast> (73)
        on left: 113 114 115 116 117
        on right: 111 112
    WriteStmtList <ast> (74)
        on left: 118 119
        on right: 108 118
    WriteStmt <ast> (75)
        on left: 120 121
        on right: 118 119
    BinOp (76)
        on left: 122 123 124 125
        on right: 128 129
    MathStatList <ast> (77)
        on left: 126 127
        on right: 54 68 107 126
    MathStat <ast> (78)
        on left: 128 129 130 131
        on right: 117 126 127 128 129


State 0

    0 $accept: . Program $end

    ID      shift, and go to state 1
    WRITE   shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    TYPE    shift, and go to state 5
    NUMBER  shift, and go to state 6

    ID        [reduce using rule 9 (FunDeclList)]
    WRITE     [reduce using rule 9 (FunDeclList)]
    IF        [reduce using rule 9 (FunDeclList)]
    WHILE     [reduce using rule 9 (FunDeclList)]
    TYPE      [reduce using rule 9 (FunDeclList)]
    NUMBER    [reduce using rule 9 (FunDeclList)]
    $default  reduce using rule 9 (FunDeclList)

    Program             go to state 7
    DeclList            go to state 8
    Decl                go to state 9
    FunDeclList         go to state 10
    FunDecl             go to state 11
    FuncallStmtList     go to state 12
    FuncallStmt         go to state 13
    ConditionList       go to state 14
    Condition           go to state 15
    WhileConditionList  go to state 16
    WhileCondition      go to state 17
    VarDecl             go to state 18
    ArrayDecl           go to state 19
    StmtList            go to state 20
    Stmt                go to state 21
    AssignStmtList      go to state 22
    AssignStmt          go to state 23
    WriteStmtList       go to state 24
    WriteStmt           go to state 25
    MathStatList        go to state 26
    MathStat            go to state 27


State 1

   15 FuncallStmt: ID . LPAREN ParamDeclList RPAREN SEMICOLON
  113 AssignStmt: ID . LBRACKET NUMBER RBRACKET EQ NUMBER SEMICOLON
  114           | ID . LBRACKET NUMBER RBRACKET EQ CHAR SEMICOLON
  115           | ID . EQ CHAR SEMICOLON
  116           | ID . EQ NUMBER SEMICOLON
  117           | ID . EQ MathStat SEMICOLON
  129 MathStat: ID . BinOp MathStat
  131         | ID .

    EQ        shift, and go to state 28
    LPAREN    shift, and go to state 29
    LBRACKET  shift, and go to state 30
    ADD       shift, and go to state 31
    SUB       shift, and go to state 32
    MULTIPLY  shift, and go to state 33
    DIV       shift, and go to state 34

    $default  reduce using rule 131 (MathStat)

    BinOp  go to state 35


State 2

  120 WriteStmt: WRITE . ID SEMICOLON
  121          | WRITE . ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID  shift, and go to state 36


State 3

   33 Condition: IF . SUB ELSE LPAREN if_else_Condition_Stmt RPAREN LBRACE ConditionBlock RBRACE ELSE LBRACE else_ConditionBlock RBRACE SEMICOLON
   34          | IF . LPAREN ConditionStmt RPAREN LBRACE ConditionBlock RBRACE SEMICOLON

    LPAREN  shift, and go to state 37
    SUB     shift, and go to state 38


State 4

   80 WhileCondition: WHILE . LPAREN The_while_condition RPAREN LBRACE WhileBlock1 WhileBlock2 WhileBlock3 RBRACE

    LPAREN  shift, and go to state 39


State 5

   12 FunDecl: TYPE . ID LPAREN ParamDeclList RPAREN Block
  100 VarDecl: TYPE . ID SEMICOLON
  103 ArrayDecl: TYPE . ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID  shift, and go to state 40


State 6

  128 MathStat: NUMBER . BinOp MathStat
  130         | NUMBER .

    ADD       shift, and go to state 31
    SUB       shift, and go to state 32
    MULTIPLY  shift, and go to state 33
    DIV       shift, and go to state 34

    $default  reduce using rule 130 (MathStat)

    BinOp  go to state 41


State 7

    0 $accept: Program . $end

    $end  shift, and go to state 42


State 8

    1 Program: DeclList .

    $default  reduce using rule 1 (Program)


State 9

    2 DeclList: Decl . DeclList
    3         | Decl .

    ID      shift, and go to state 1
    WRITE   shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    TYPE    shift, and go to state 5
    NUMBER  shift, and go to state 6

    $end      reduce using rule 3 (DeclList)
    $end      [reduce using rule 9 (FunDeclList)]
    ID        [reduce using rule 9 (FunDeclList)]
    WRITE     [reduce using rule 9 (FunDeclList)]
    IF        [reduce using rule 9 (FunDeclList)]
    WHILE     [reduce using rule 9 (FunDeclList)]
    TYPE      [reduce using rule 9 (FunDeclList)]
    NUMBER    [reduce using rule 9 (FunDeclList)]
    $default  reduce using rule 3 (DeclList)

    DeclList            go to state 43
    Decl                go to state 9
    FunDeclList         go to state 10
    FunDecl             go to state 11
    FuncallStmtList     go to state 12
    FuncallStmt         go to state 13
    ConditionList       go to state 14
    Condition           go to state 15
    WhileConditionList  go to state 16
    WhileCondition      go to state 17
    VarDecl             go to state 18
    ArrayDecl           go to state 19
    StmtList            go to state 20
    Stmt                go to state 21
    AssignStmtList      go to state 22
    AssignStmt          go to state 23
    WriteStmtList       go to state 24
    WriteStmt           go to state 25
    MathStatList        go to state 26
    MathStat            go to state 27


State 10

    4 Decl: FunDeclList .

    $default  reduce using rule 4 (Decl)


State 11

   10 FunDeclList: FunDecl . FunDeclList
   11            | FunDecl .

    TYPE  shift, and go to state 44

    $end      reduce using rule 9 (FunDeclList)
    $end      [reduce using rule 11 (FunDeclList)]
    ID        reduce using rule 9 (FunDeclList)
    ID        [reduce using rule 11 (FunDeclList)]
    WRITE     reduce using rule 9 (FunDeclList)
    WRITE     [reduce using rule 11 (FunDeclList)]
    IF        reduce using rule 9 (FunDeclList)
    IF        [reduce using rule 11 (FunDeclList)]
    WHILE     reduce using rule 9 (FunDeclList)
    WHILE     [reduce using rule 11 (FunDeclList)]
    TYPE      [reduce using rule 9 (FunDeclList)]
    TYPE      [reduce using rule 11 (FunDeclList)]
    NUMBER    reduce using rule 9 (FunDeclList)
    NUMBER    [reduce using rule 11 (FunDeclList)]
    RBRACE    reduce using rule 9 (FunDeclList)
    RBRACE    [reduce using rule 11 (FunDeclList)]
    $default  reduce using rule 9 (FunDeclList)

    FunDeclList  go to state 45
    FunDecl      go to state 11


State 12

  109 Stmt: FuncallStmtList .

    $default  reduce using rule 109 (Stmt)


State 13

   13 FuncallStmtList: FuncallStmt . FuncallStmtList
   14                | FuncallStmt .

    ID  shift, and go to state 46

    ID        [reduce using rule 14 (FuncallStmtList)]
    $default  reduce using rule 14 (FuncallStmtList)

    FuncallStmtList  go to state 47
    FuncallStmt      go to state 13


State 14

    5 Decl: ConditionList .

    $default  reduce using rule 5 (Decl)


State 15

   31 ConditionList: Condition . ConditionList
   32              | Condition .

    IF  shift, and go to state 3

    IF        [reduce using rule 32 (ConditionList)]
    $default  reduce using rule 32 (ConditionList)

    ConditionList  go to state 48
    Condition      go to state 15


State 16

  110 Stmt: WhileConditionList .

    $default  reduce using rule 110 (Stmt)


State 17

   78 WhileConditionList: WhileCondition . WhileConditionList
   79                   | WhileCondition .

    WHILE  shift, and go to state 4

    WHILE     [reduce using rule 79 (WhileConditionList)]
    $default  reduce using rule 79 (WhileConditionList)

    WhileConditionList  go to state 49
    WhileCondition      go to state 17


State 18

    7 Decl: VarDecl .

    $default  reduce using rule 7 (Decl)


State 19

    8 Decl: ArrayDecl .

    $default  reduce using rule 8 (Decl)


State 20

    6 Decl: StmtList .

    $default  reduce using rule 6 (Decl)


State 21

  104 StmtList: Stmt . StmtList
  105         | Stmt .

    ID      shift, and go to state 1
    WRITE   shift, and go to state 2
    WHILE   shift, and go to state 4
    NUMBER  shift, and go to state 6

    ID        [reduce using rule 105 (StmtList)]
    WRITE     [reduce using rule 105 (StmtList)]
    WHILE     [reduce using rule 105 (StmtList)]
    NUMBER    [reduce using rule 105 (StmtList)]
    $default  reduce using rule 105 (StmtList)

    FuncallStmtList     go to state 12
    FuncallStmt         go to state 13
    WhileConditionList  go to state 16
    WhileCondition      go to state 17
    StmtList            go to state 50
    Stmt                go to state 21
    AssignStmtList      go to state 22
    AssignStmt          go to state 23
    WriteStmtList       go to state 24
    WriteStmt           go to state 25
    MathStatList        go to state 26
    MathStat            go to state 27


State 22

  106 Stmt: AssignStmtList .

    $default  reduce using rule 106 (Stmt)


State 23

  111 AssignStmtList: AssignStmt . AssignStmtList
  112               | AssignStmt .

    ID  shift, and go to state 51

    ID        [reduce using rule 112 (AssignStmtList)]
    $default  reduce using rule 112 (AssignStmtList)

    AssignStmtList  go to state 52
    AssignStmt      go to state 23


State 24

  108 Stmt: WriteStmtList .

    $default  reduce using rule 108 (Stmt)


State 25

  118 WriteStmtList: WriteStmt . WriteStmtList
  119              | WriteStmt .

    WRITE  shift, and go to state 2

    WRITE     [reduce using rule 119 (WriteStmtList)]
    $default  reduce using rule 119 (WriteStmtList)

    WriteStmtList  go to state 53
    WriteStmt      go to state 25


State 26

  107 Stmt: MathStatList .

    $default  reduce using rule 107 (Stmt)


State 27

  126 MathStatList: MathStat . MathStatList
  127             | MathStat .

    ID      shift, and go to state 54
    NUMBER  shift, and go to state 6

    ID        [reduce using rule 127 (MathStatList)]
    NUMBER    [reduce using rule 127 (MathStatList)]
    $default  reduce using rule 127 (MathStatList)

    MathStatList  go to state 55
    MathStat      go to state 27


State 28

  115 AssignStmt: ID EQ . CHAR SEMICOLON
  116           | ID EQ . NUMBER SEMICOLON
  117           | ID EQ . MathStat SEMICOLON

    ID      shift, and go to state 54
    NUMBER  shift, and go to state 56
    CHAR    shift, and go to state 57

    MathStat  go to state 58


State 29

   15 FuncallStmt: ID LPAREN . ParamDeclList RPAREN SEMICOLON

    TYPE  shift, and go to state 59

    TYPE      [reduce using rule 20 (ParamDecl)]
    RPAREN    reduce using rule 16 (ParamDeclList)
    RPAREN    [reduce using rule 20 (ParamDecl)]
    $default  reduce using rule 16 (ParamDeclList)

    ParamDeclList  go to state 60
    ParamDecl      go to state 61


State 30

  113 AssignStmt: ID LBRACKET . NUMBER RBRACKET EQ NUMBER SEMICOLON
  114           | ID LBRACKET . NUMBER RBRACKET EQ CHAR SEMICOLON

    NUMBER  shift, and go to state 62


State 31

  122 BinOp: ADD .

    $default  reduce using rule 122 (BinOp)


State 32

  123 BinOp: SUB .

    $default  reduce using rule 123 (BinOp)


State 33

  124 BinOp: MULTIPLY .

    $default  reduce using rule 124 (BinOp)


State 34

  125 BinOp: DIV .

    $default  reduce using rule 125 (BinOp)


State 35

  129 MathStat: ID BinOp . MathStat

    ID      shift, and go to state 54
    NUMBER  shift, and go to state 6

    MathStat  go to state 63


State 36

  120 WriteStmt: WRITE ID . SEMICOLON
  121          | WRITE ID . LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 64
    LBRACKET   shift, and go to state 65


State 37

   34 Condition: IF LPAREN . ConditionStmt RPAREN LBRACE ConditionBlock RBRACE SEMICOLON

    ID      shift, and go to state 66
    NUMBER  shift, and go to state 67

    $default  reduce using rule 40 (ConditionStmt)

    ConditionStmt  go to state 68


State 38

   33 Condition: IF SUB . ELSE LPAREN if_else_Condition_Stmt RPAREN LBRACE ConditionBlock RBRACE ELSE LBRACE else_ConditionBlock RBRACE SEMICOLON

    ELSE  shift, and go to state 69


State 39

   80 WhileCondition: WHILE LPAREN . The_while_condition RPAREN LBRACE WhileBlock1 WhileBlock2 WhileBlock3 RBRACE

    ID  shift, and go to state 70

    The_while_condition  go to state 71


State 40

   12 FunDecl: TYPE ID . LPAREN ParamDeclList RPAREN Block
  100 VarDecl: TYPE ID . SEMICOLON
  103 ArrayDecl: TYPE ID . LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 72
    LPAREN     shift, and go to state 73
    LBRACKET   shift, and go to state 74


State 41

  128 MathStat: NUMBER BinOp . MathStat

    ID      shift, and go to state 54
    NUMBER  shift, and go to state 6

    MathStat  go to state 75


State 42

    0 $accept: Program $end .

    $default  accept


State 43

    2 DeclList: Decl DeclList .

    $default  reduce using rule 2 (DeclList)


State 44

   12 FunDecl: TYPE . ID LPAREN ParamDeclList RPAREN Block

    ID  shift, and go to state 76


State 45

   10 FunDeclList: FunDecl FunDeclList .

    $default  reduce using rule 10 (FunDeclList)


State 46

   15 FuncallStmt: ID . LPAREN ParamDeclList RPAREN SEMICOLON

    LPAREN  shift, and go to state 29


State 47

   13 FuncallStmtList: FuncallStmt FuncallStmtList .

    $default  reduce using rule 13 (FuncallStmtList)


State 48

   31 ConditionList: Condition ConditionList .

    $default  reduce using rule 31 (ConditionList)


State 49

   78 WhileConditionList: WhileCondition WhileConditionList .

    $default  reduce using rule 78 (WhileConditionList)


State 50

  104 StmtList: Stmt StmtList .

    $default  reduce using rule 104 (StmtList)


State 51

  113 AssignStmt: ID . LBRACKET NUMBER RBRACKET EQ NUMBER SEMICOLON
  114           | ID . LBRACKET NUMBER RBRACKET EQ CHAR SEMICOLON
  115           | ID . EQ CHAR SEMICOLON
  116           | ID . EQ NUMBER SEMICOLON
  117           | ID . EQ MathStat SEMICOLON

    EQ        shift, and go to state 28
    LBRACKET  shift, and go to state 30


State 52

  111 AssignStmtList: AssignStmt AssignStmtList .

    $default  reduce using rule 111 (AssignStmtList)


State 53

  118 WriteStmtList: WriteStmt WriteStmtList .

    $default  reduce using rule 118 (WriteStmtList)


State 54

  129 MathStat: ID . BinOp MathStat
  131         | ID .

    ADD       shift, and go to state 31
    SUB       shift, and go to state 32
    MULTIPLY  shift, and go to state 33
    DIV       shift, and go to state 34

    $default  reduce using rule 131 (MathStat)

    BinOp  go to state 35


State 55

  126 MathStatList: MathStat MathStatList .

    $default  reduce using rule 126 (MathStatList)


State 56

  116 AssignStmt: ID EQ NUMBER . SEMICOLON
  128 MathStat: NUMBER . BinOp MathStat
  130         | NUMBER .

    SEMICOLON  shift, and go to state 77
    ADD        shift, and go to state 31
    SUB        shift, and go to state 32
    MULTIPLY   shift, and go to state 33
    DIV        shift, and go to state 34

    SEMICOLON  [reduce using rule 130 (MathStat)]

    BinOp  go to state 41


State 57

  115 AssignStmt: ID EQ CHAR . SEMICOLON

    SEMICOLON  shift, and go to state 78


State 58

  117 AssignStmt: ID EQ MathStat . SEMICOLON

    SEMICOLON  shift, and go to state 79


State 59

   19 ParamDecl: TYPE . ID

    ID  shift, and go to state 80


State 60

   15 FuncallStmt: ID LPAREN ParamDeclList . RPAREN SEMICOLON

    RPAREN  shift, and go to state 81


State 61

   17 ParamDeclList: ParamDecl . ParamDeclList
   18              | ParamDecl .

    TYPE  shift, and go to state 59

    TYPE      [reduce using rule 20 (ParamDecl)]
    RPAREN    reduce using rule 16 (ParamDeclList)
    RPAREN    [reduce using rule 18 (ParamDeclList)]
    RPAREN    [reduce using rule 20 (ParamDecl)]
    $default  reduce using rule 16 (ParamDeclList)

    ParamDeclList  go to state 82
    ParamDecl      go to state 61


State 62

  113 AssignStmt: ID LBRACKET NUMBER . RBRACKET EQ NUMBER SEMICOLON
  114           | ID LBRACKET NUMBER . RBRACKET EQ CHAR SEMICOLON

    RBRACKET  shift, and go to state 83


State 63

  129 MathStat: ID BinOp MathStat .

    $default  reduce using rule 129 (MathStat)


State 64

  120 WriteStmt: WRITE ID SEMICOLON .

    $default  reduce using rule 120 (WriteStmt)


State 65

  121 WriteStmt: WRITE ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER  shift, and go to state 84


State 66

   42 ConditionStmt: ID . LogicalOp ID
   43              | ID . LogicalOp NUMBER

    EQ   shift, and go to state 85
    OR   shift, and go to state 86
    LSS  shift, and go to state 87
    GTR  shift, and go to state 88
    LEQ  shift, and go to state 89
    GEQ  shift, and go to state 90

    LogicalOp  go to state 91


State 67

   41 ConditionStmt: NUMBER . LogicalOp NUMBER
   44              | NUMBER . LogicalOp ID

    EQ   shift, and go to state 85
    OR   shift, and go to state 86
    LSS  shift, and go to state 87
    GTR  shift, and go to state 88
    LEQ  shift, and go to state 89
    GEQ  shift, and go to state 90

    LogicalOp  go to state 92


State 68

   34 Condition: IF LPAREN ConditionStmt . RPAREN LBRACE ConditionBlock RBRACE SEMICOLON

    RPAREN  shift, and go to state 93


State 69

   33 Condition: IF SUB ELSE . LPAREN if_else_Condition_Stmt RPAREN LBRACE ConditionBlock RBRACE ELSE LBRACE else_ConditionBlock RBRACE SEMICOLON

    LPAREN  shift, and go to state 94


State 70

   81 The_while_condition: ID . WhileLogicalOp ID

    EQ   shift, and go to state 95
    OR   shift, and go to state 96
    LSS  shift, and go to state 97
    GTR  shift, and go to state 98
    GEQ  shift, and go to state 99

    WhileLogicalOp  go to state 100


State 71

   80 WhileCondition: WHILE LPAREN The_while_condition . RPAREN LBRACE WhileBlock1 WhileBlock2 WhileBlock3 RBRACE

    RPAREN  shift, and go to state 101


State 72

  100 VarDecl: TYPE ID SEMICOLON .

    $default  reduce using rule 100 (VarDecl)


State 73

   12 FunDecl: TYPE ID LPAREN . ParamDeclList RPAREN Block

    TYPE  shift, and go to state 59

    TYPE      [reduce using rule 20 (ParamDecl)]
    RPAREN    reduce using rule 16 (ParamDeclList)
    RPAREN    [reduce using rule 20 (ParamDecl)]
    $default  reduce using rule 16 (ParamDeclList)

    ParamDeclList  go to state 102
    ParamDecl      go to state 61


State 74

  103 ArrayDecl: TYPE ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER  shift, and go to state 103


State 75

  128 MathStat: NUMBER BinOp MathStat .

    $default  reduce using rule 128 (MathStat)


State 76

   12 FunDecl: TYPE ID . LPAREN ParamDeclList RPAREN Block

    LPAREN  shift, and go to state 73


State 77

  116 AssignStmt: ID EQ NUMBER SEMICOLON .

    $default  reduce using rule 116 (AssignStmt)


State 78

  115 AssignStmt: ID EQ CHAR SEMICOLON .

    $default  reduce using rule 115 (AssignStmt)


State 79

  117 AssignStmt: ID EQ MathStat SEMICOLON .

    $default  reduce using rule 117 (AssignStmt)


State 80

   19 ParamDecl: TYPE ID .

    $default  reduce using rule 19 (ParamDecl)


State 81

   15 FuncallStmt: ID LPAREN ParamDeclList RPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 104


State 82

   17 ParamDeclList: ParamDecl ParamDeclList .

    $default  reduce using rule 17 (ParamDeclList)


State 83

  113 AssignStmt: ID LBRACKET NUMBER RBRACKET . EQ NUMBER SEMICOLON
  114           | ID LBRACKET NUMBER RBRACKET . EQ CHAR SEMICOLON

    EQ  shift, and go to state 105


State 84

  121 WriteStmt: WRITE ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 106


State 85

   27 LogicalOp: EQ . EQ

    EQ  shift, and go to state 107


State 86

   30 LogicalOp: OR .

    $default  reduce using rule 30 (LogicalOp)


State 87

   29 LogicalOp: LSS .

    $default  reduce using rule 29 (LogicalOp)


State 88

   28 LogicalOp: GTR .

    $default  reduce using rule 28 (LogicalOp)


State 89

   25 LogicalOp: LEQ .

    $default  reduce using rule 25 (LogicalOp)


State 90

   26 LogicalOp: GEQ .

    $default  reduce using rule 26 (LogicalOp)


State 91

   42 ConditionStmt: ID LogicalOp . ID
   43              | ID LogicalOp . NUMBER

    ID      shift, and go to state 108
    NUMBER  shift, and go to state 109


State 92

   41 ConditionStmt: NUMBER LogicalOp . NUMBER
   44              | NUMBER LogicalOp . ID

    ID      shift, and go to state 110
    NUMBER  shift, and go to state 111


State 93

   34 Condition: IF LPAREN ConditionStmt RPAREN . LBRACE ConditionBlock RBRACE SEMICOLON

    LBRACE  shift, and go to state 112


State 94

   33 Condition: IF SUB ELSE LPAREN . if_else_Condition_Stmt RPAREN LBRACE ConditionBlock RBRACE ELSE LBRACE else_ConditionBlock RBRACE SEMICOLON

    ID      shift, and go to state 113
    NUMBER  shift, and go to state 114

    $default  reduce using rule 35 (if_else_Condition_Stmt)

    if_else_Condition_Stmt  go to state 115


State 95

   75 WhileLogicalOp: EQ . EQ

    EQ  shift, and go to state 116


State 96

   77 WhileLogicalOp: OR .

    $default  reduce using rule 77 (WhileLogicalOp)


State 97

   76 WhileLogicalOp: LSS .

    $default  reduce using rule 76 (WhileLogicalOp)


State 98

   73 WhileLogicalOp: GTR .

    $default  reduce using rule 73 (WhileLogicalOp)


State 99

   74 WhileLogicalOp: GEQ .

    $default  reduce using rule 74 (WhileLogicalOp)


State 100

   81 The_while_condition: ID WhileLogicalOp . ID

    ID  shift, and go to state 117


State 101

   80 WhileCondition: WHILE LPAREN The_while_condition RPAREN . LBRACE WhileBlock1 WhileBlock2 WhileBlock3 RBRACE

    LBRACE  shift, and go to state 118


State 102

   12 FunDecl: TYPE ID LPAREN ParamDeclList . RPAREN Block

    RPAREN  shift, and go to state 119


State 103

  103 ArrayDecl: TYPE ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 120


State 104

   15 FuncallStmt: ID LPAREN ParamDeclList RPAREN SEMICOLON .

    $default  reduce using rule 15 (FuncallStmt)


State 105

  113 AssignStmt: ID LBRACKET NUMBER RBRACKET EQ . NUMBER SEMICOLON
  114           | ID LBRACKET NUMBER RBRACKET EQ . CHAR SEMICOLON

    NUMBER  shift, and go to state 121
    CHAR    shift, and go to state 122


State 106

  121 WriteStmt: WRITE ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 123


State 107

   27 LogicalOp: EQ EQ .

    $default  reduce using rule 27 (LogicalOp)


State 108

   42 ConditionStmt: ID LogicalOp ID .

    $default  reduce using rule 42 (ConditionStmt)


State 109

   43 ConditionStmt: ID LogicalOp NUMBER .

    $default  reduce using rule 43 (ConditionStmt)


State 110

   44 ConditionStmt: NUMBER LogicalOp ID .

    $default  reduce using rule 44 (ConditionStmt)


State 111

   41 ConditionStmt: NUMBER LogicalOp NUMBER .

    $default  reduce using rule 41 (ConditionStmt)


State 112

   34 Condition: IF LPAREN ConditionStmt RPAREN LBRACE . ConditionBlock RBRACE SEMICOLON

    ID      shift, and go to state 1
    WRITE   shift, and go to state 124
    IF      shift, and go to state 3
    TYPE    shift, and go to state 5
    NUMBER  shift, and go to state 6

    RBRACE    reduce using rule 9 (FunDeclList)
    RBRACE    [reduce using rule 50 (ConditionBlock)]
    $default  reduce using rule 9 (FunDeclList)

    FunDeclList         go to state 125
    FunDecl             go to state 11
    FuncallStmtList     go to state 126
    FuncallStmt         go to state 13
    ConditionList       go to state 127
    Condition           go to state 15
    ConditionBlock      go to state 128
    stmt_list_for_if    go to state 129
    stmt_for_if         go to state 130
    Write_stmt_for_ifs  go to state 131
    VarDeclList         go to state 132
    VarDecl             go to state 133
    ArrayDeclList       go to state 134
    ArrayDecl           go to state 135
    AssignStmtList      go to state 136
    AssignStmt          go to state 23
    MathStatList        go to state 137
    MathStat            go to state 27


State 113

   37 if_else_Condition_Stmt: ID . LogicalOp ID
   38                       | ID . LogicalOp NUMBER

    EQ   shift, and go to state 85
    OR   shift, and go to state 86
    LSS  shift, and go to state 87
    GTR  shift, and go to state 88
    LEQ  shift, and go to state 89
    GEQ  shift, and go to state 90

    LogicalOp  go to state 138


State 114

   36 if_else_Condition_Stmt: NUMBER . LogicalOp NUMBER
   39                       | NUMBER . LogicalOp ID

    EQ   shift, and go to state 85
    OR   shift, and go to state 86
    LSS  shift, and go to state 87
    GTR  shift, and go to state 88
    LEQ  shift, and go to state 89
    GEQ  shift, and go to state 90

    LogicalOp  go to state 139


State 115

   33 Condition: IF SUB ELSE LPAREN if_else_Condition_Stmt . RPAREN LBRACE ConditionBlock RBRACE ELSE LBRACE else_ConditionBlock RBRACE SEMICOLON

    RPAREN  shift, and go to state 140


State 116

   75 WhileLogicalOp: EQ EQ .

    $default  reduce using rule 75 (WhileLogicalOp)


State 117

   81 The_while_condition: ID WhileLogicalOp ID .

    $default  reduce using rule 81 (The_while_condition)


State 118

   80 WhileCondition: WHILE LPAREN The_while_condition RPAREN LBRACE . WhileBlock1 WhileBlock2 WhileBlock3 RBRACE

    ID     shift, and go to state 141
    WRITE  shift, and go to state 142

    ID        [reduce using rule 89 (WhileBlock1)]
    WRITE     [reduce using rule 89 (WhileBlock1)]
    $default  reduce using rule 89 (WhileBlock1)

    WhileBlock1  go to state 143


State 119

   12 FunDecl: TYPE ID LPAREN ParamDeclList RPAREN . Block

    LBRACE  shift, and go to state 144

    Block  go to state 145


State 120

  103 ArrayDecl: TYPE ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 146


State 121

  113 AssignStmt: ID LBRACKET NUMBER RBRACKET EQ NUMBER . SEMICOLON

    SEMICOLON  shift, and go to state 147


State 122

  114 AssignStmt: ID LBRACKET NUMBER RBRACKET EQ CHAR . SEMICOLON

    SEMICOLON  shift, and go to state 148


State 123

  121 WriteStmt: WRITE ID LBRACKET NUMBER RBRACKET SEMICOLON .

    $default  reduce using rule 121 (WriteStmt)


State 124

   57 Write_stmt_for_ifs: WRITE . ID SEMICOLON
   58                   | WRITE . ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID  shift, and go to state 149


State 125

   46 ConditionBlock: FunDeclList .

    $default  reduce using rule 46 (ConditionBlock)


State 126

   56 stmt_for_if: FuncallStmtList .

    $default  reduce using rule 56 (stmt_for_if)


State 127

   47 ConditionBlock: ConditionList .

    $default  reduce using rule 47 (ConditionBlock)


State 128

   34 Condition: IF LPAREN ConditionStmt RPAREN LBRACE ConditionBlock . RBRACE SEMICOLON

    RBRACE  shift, and go to state 150


State 129

   45 ConditionBlock: stmt_list_for_if .

    $default  reduce using rule 45 (ConditionBlock)


State 130

   51 stmt_list_for_if: stmt_for_if . stmt_list_for_if
   52                 | stmt_for_if .

    ID      shift, and go to state 1
    WRITE   shift, and go to state 124
    NUMBER  shift, and go to state 6

    $default  reduce using rule 52 (stmt_list_for_if)

    FuncallStmtList     go to state 126
    FuncallStmt         go to state 13
    stmt_list_for_if    go to state 151
    stmt_for_if         go to state 130
    Write_stmt_for_ifs  go to state 131
    AssignStmtList      go to state 136
    AssignStmt          go to state 23
    MathStatList        go to state 137
    MathStat            go to state 27


State 131

   55 stmt_for_if: Write_stmt_for_ifs .

    $default  reduce using rule 55 (stmt_for_if)


State 132

   48 ConditionBlock: VarDeclList .

    $default  reduce using rule 48 (ConditionBlock)


State 133

   98 VarDeclList: VarDecl . VarDeclList
   99            | VarDecl .

    TYPE  shift, and go to state 152

    $default  reduce using rule 99 (VarDeclList)

    VarDeclList  go to state 153
    VarDecl      go to state 133


State 134

   49 ConditionBlock: ArrayDeclList .

    $default  reduce using rule 49 (ConditionBlock)


State 135

  101 ArrayDeclList: ArrayDecl . ArrayDeclList
  102              | ArrayDecl .

    TYPE  shift, and go to state 154

    $default  reduce using rule 102 (ArrayDeclList)

    ArrayDeclList  go to state 155
    ArrayDecl      go to state 135


State 136

   53 stmt_for_if: AssignStmtList .

    $default  reduce using rule 53 (stmt_for_if)


State 137

   54 stmt_for_if: MathStatList .

    $default  reduce using rule 54 (stmt_for_if)


State 138

   37 if_else_Condition_Stmt: ID LogicalOp . ID
   38                       | ID LogicalOp . NUMBER

    ID      shift, and go to state 156
    NUMBER  shift, and go to state 157


State 139

   36 if_else_Condition_Stmt: NUMBER LogicalOp . NUMBER
   39                       | NUMBER LogicalOp . ID

    ID      shift, and go to state 158
    NUMBER  shift, and go to state 159


State 140

   33 Condition: IF SUB ELSE LPAREN if_else_Condition_Stmt RPAREN . LBRACE ConditionBlock RBRACE ELSE LBRACE else_ConditionBlock RBRACE SEMICOLON

    LBRACE  shift, and go to state 160


State 141

   86 WhileBlock1: ID . EQ ID WhileBinOp ID SEMICOLON
   87            | ID . EQ ID WhileBinOp NUMBER SEMICOLON

    EQ  shift, and go to state 161


State 142

   88 WhileBlock1: WRITE . ID SEMICOLON

    ID  shift, and go to state 162


State 143

   80 WhileCondition: WHILE LPAREN The_while_condition RPAREN LBRACE WhileBlock1 . WhileBlock2 WhileBlock3 RBRACE

    ID     shift, and go to state 163
    WRITE  shift, and go to state 164

    ID        [reduce using rule 93 (WhileBlock2)]
    WRITE     [reduce using rule 93 (WhileBlock2)]
    $default  reduce using rule 93 (WhileBlock2)

    WhileBlock2  go to state 165


State 144

   21 Block: LBRACE . FunBlock RBRACE

    ID      shift, and go to state 1
    WRITE   shift, and go to state 2
    WHILE   shift, and go to state 4
    TYPE    shift, and go to state 166
    NUMBER  shift, and go to state 6

    FuncallStmtList     go to state 12
    FuncallStmt         go to state 13
    FunBlock            go to state 167
    WhileConditionList  go to state 16
    WhileCondition      go to state 17
    VarDeclList         go to state 168
    VarDecl             go to state 133
    ArrayDeclList       go to state 169
    ArrayDecl           go to state 135
    StmtList            go to state 170
    Stmt                go to state 21
    AssignStmtList      go to state 22
    AssignStmt          go to state 23
    WriteStmtList       go to state 24
    WriteStmt           go to state 25
    MathStatList        go to state 26
    MathStat            go to state 27


State 145

   12 FunDecl: TYPE ID LPAREN ParamDeclList RPAREN Block .

    $default  reduce using rule 12 (FunDecl)


State 146

  103 ArrayDecl: TYPE ID LBRACKET NUMBER RBRACKET SEMICOLON .

    $default  reduce using rule 103 (ArrayDecl)


State 147

  113 AssignStmt: ID LBRACKET NUMBER RBRACKET EQ NUMBER SEMICOLON .

    $default  reduce using rule 113 (AssignStmt)


State 148

  114 AssignStmt: ID LBRACKET NUMBER RBRACKET EQ CHAR SEMICOLON .

    $default  reduce using rule 114 (AssignStmt)


State 149

   57 Write_stmt_for_ifs: WRITE ID . SEMICOLON
   58                   | WRITE ID . LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 171
    LBRACKET   shift, and go to state 172


State 150

   34 Condition: IF LPAREN ConditionStmt RPAREN LBRACE ConditionBlock RBRACE . SEMICOLON

    SEMICOLON  shift, and go to state 173


State 151

   51 stmt_list_for_if: stmt_for_if stmt_list_for_if .

    $default  reduce using rule 51 (stmt_list_for_if)


State 152

  100 VarDecl: TYPE . ID SEMICOLON

    ID  shift, and go to state 174


State 153

   98 VarDeclList: VarDecl VarDeclList .

    $default  reduce using rule 98 (VarDeclList)


State 154

  103 ArrayDecl: TYPE . ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID  shift, and go to state 175


State 155

  101 ArrayDeclList: ArrayDecl ArrayDeclList .

    $default  reduce using rule 101 (ArrayDeclList)


State 156

   37 if_else_Condition_Stmt: ID LogicalOp ID .

    $default  reduce using rule 37 (if_else_Condition_Stmt)


State 157

   38 if_else_Condition_Stmt: ID LogicalOp NUMBER .

    $default  reduce using rule 38 (if_else_Condition_Stmt)


State 158

   39 if_else_Condition_Stmt: NUMBER LogicalOp ID .

    $default  reduce using rule 39 (if_else_Condition_Stmt)


State 159

   36 if_else_Condition_Stmt: NUMBER LogicalOp NUMBER .

    $default  reduce using rule 36 (if_else_Condition_Stmt)


State 160

   33 Condition: IF SUB ELSE LPAREN if_else_Condition_Stmt RPAREN LBRACE . ConditionBlock RBRACE ELSE LBRACE else_ConditionBlock RBRACE SEMICOLON

    ID      shift, and go to state 1
    WRITE   shift, and go to state 124
    IF      shift, and go to state 3
    TYPE    shift, and go to state 5
    NUMBER  shift, and go to state 6

    RBRACE    reduce using rule 9 (FunDeclList)
    RBRACE    [reduce using rule 50 (ConditionBlock)]
    $default  reduce using rule 9 (FunDeclList)

    FunDeclList         go to state 125
    FunDecl             go to state 11
    FuncallStmtList     go to state 126
    FuncallStmt         go to state 13
    ConditionList       go to state 127
    Condition           go to state 15
    ConditionBlock      go to state 176
    stmt_list_for_if    go to state 129
    stmt_for_if         go to state 130
    Write_stmt_for_ifs  go to state 131
    VarDeclList         go to state 132
    VarDecl             go to state 133
    ArrayDeclList       go to state 134
    ArrayDecl           go to state 135
    AssignStmtList      go to state 136
    AssignStmt          go to state 23
    MathStatList        go to state 137
    MathStat            go to state 27


State 161

   86 WhileBlock1: ID EQ . ID WhileBinOp ID SEMICOLON
   87            | ID EQ . ID WhileBinOp NUMBER SEMICOLON

    ID  shift, and go to state 177


State 162

   88 WhileBlock1: WRITE ID . SEMICOLON

    SEMICOLON  shift, and go to state 178


State 163

   90 WhileBlock2: ID . EQ ID WhileBinOp ID SEMICOLON
   91            | ID . EQ ID WhileBinOp NUMBER SEMICOLON

    EQ  shift, and go to state 179


State 164

   92 WhileBlock2: WRITE . ID SEMICOLON

    ID  shift, and go to state 180


State 165

   80 WhileCondition: WHILE LPAREN The_while_condition RPAREN LBRACE WhileBlock1 WhileBlock2 . WhileBlock3 RBRACE

    ID     shift, and go to state 181
    WRITE  shift, and go to state 182

    $default  reduce using rule 97 (WhileBlock3)

    WhileBlock3  go to state 183


State 166

  100 VarDecl: TYPE . ID SEMICOLON
  103 ArrayDecl: TYPE . ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID  shift, and go to state 184


State 167

   21 Block: LBRACE FunBlock . RBRACE

    RBRACE  shift, and go to state 185


State 168

   23 FunBlock: VarDeclList .

    $default  reduce using rule 23 (FunBlock)


State 169

   22 FunBlock: ArrayDeclList .

    $default  reduce using rule 22 (FunBlock)


State 170

   24 FunBlock: StmtList .

    $default  reduce using rule 24 (FunBlock)


State 171

   57 Write_stmt_for_ifs: WRITE ID SEMICOLON .

    $default  reduce using rule 57 (Write_stmt_for_ifs)


State 172

   58 Write_stmt_for_ifs: WRITE ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER  shift, and go to state 186


State 173

   34 Condition: IF LPAREN ConditionStmt RPAREN LBRACE ConditionBlock RBRACE SEMICOLON .

    $default  reduce using rule 34 (Condition)


State 174

  100 VarDecl: TYPE ID . SEMICOLON

    SEMICOLON  shift, and go to state 72


State 175

  103 ArrayDecl: TYPE ID . LBRACKET NUMBER RBRACKET SEMICOLON

    LBRACKET  shift, and go to state 74


State 176

   33 Condition: IF SUB ELSE LPAREN if_else_Condition_Stmt RPAREN LBRACE ConditionBlock . RBRACE ELSE LBRACE else_ConditionBlock RBRACE SEMICOLON

    RBRACE  shift, and go to state 187


State 177

   86 WhileBlock1: ID EQ ID . WhileBinOp ID SEMICOLON
   87            | ID EQ ID . WhileBinOp NUMBER SEMICOLON

    ADD       shift, and go to state 188
    SUB       shift, and go to state 189
    MULTIPLY  shift, and go to state 190
    DIV       shift, and go to state 191

    WhileBinOp  go to state 192


State 178

   88 WhileBlock1: WRITE ID SEMICOLON .

    $default  reduce using rule 88 (WhileBlock1)


State 179

   90 WhileBlock2: ID EQ . ID WhileBinOp ID SEMICOLON
   91            | ID EQ . ID WhileBinOp NUMBER SEMICOLON

    ID  shift, and go to state 193


State 180

   92 WhileBlock2: WRITE ID . SEMICOLON

    SEMICOLON  shift, and go to state 194


State 181

   94 WhileBlock3: ID . EQ ID WhileBinOp ID SEMICOLON
   95            | ID . EQ ID WhileBinOp NUMBER SEMICOLON

    EQ  shift, and go to state 195


State 182

   96 WhileBlock3: WRITE . ID SEMICOLON

    ID  shift, and go to state 196


State 183

   80 WhileCondition: WHILE LPAREN The_while_condition RPAREN LBRACE WhileBlock1 WhileBlock2 WhileBlock3 . RBRACE

    RBRACE  shift, and go to state 197


State 184

  100 VarDecl: TYPE ID . SEMICOLON
  103 ArrayDecl: TYPE ID . LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 72
    LBRACKET   shift, and go to state 74


State 185

   21 Block: LBRACE FunBlock RBRACE .

    $default  reduce using rule 21 (Block)


State 186

   58 Write_stmt_for_ifs: WRITE ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 198


State 187

   33 Condition: IF SUB ELSE LPAREN if_else_Condition_Stmt RPAREN LBRACE ConditionBlock RBRACE . ELSE LBRACE else_ConditionBlock RBRACE SEMICOLON

    ELSE  shift, and go to state 199


State 188

   82 WhileBinOp: ADD .

    $default  reduce using rule 82 (WhileBinOp)


State 189

   83 WhileBinOp: SUB .

    $default  reduce using rule 83 (WhileBinOp)


State 190

   84 WhileBinOp: MULTIPLY .

    $default  reduce using rule 84 (WhileBinOp)


State 191

   85 WhileBinOp: DIV .

    $default  reduce using rule 85 (WhileBinOp)


State 192

   86 WhileBlock1: ID EQ ID WhileBinOp . ID SEMICOLON
   87            | ID EQ ID WhileBinOp . NUMBER SEMICOLON

    ID      shift, and go to state 200
    NUMBER  shift, and go to state 201


State 193

   90 WhileBlock2: ID EQ ID . WhileBinOp ID SEMICOLON
   91            | ID EQ ID . WhileBinOp NUMBER SEMICOLON

    ADD       shift, and go to state 188
    SUB       shift, and go to state 189
    MULTIPLY  shift, and go to state 190
    DIV       shift, and go to state 191

    WhileBinOp  go to state 202


State 194

   92 WhileBlock2: WRITE ID SEMICOLON .

    $default  reduce using rule 92 (WhileBlock2)


State 195

   94 WhileBlock3: ID EQ . ID WhileBinOp ID SEMICOLON
   95            | ID EQ . ID WhileBinOp NUMBER SEMICOLON

    ID  shift, and go to state 203


State 196

   96 WhileBlock3: WRITE ID . SEMICOLON

    SEMICOLON  shift, and go to state 204


State 197

   80 WhileCondition: WHILE LPAREN The_while_condition RPAREN LBRACE WhileBlock1 WhileBlock2 WhileBlock3 RBRACE .

    $default  reduce using rule 80 (WhileCondition)


State 198

   58 Write_stmt_for_ifs: WRITE ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 205


State 199

   33 Condition: IF SUB ELSE LPAREN if_else_Condition_Stmt RPAREN LBRACE ConditionBlock RBRACE ELSE . LBRACE else_ConditionBlock RBRACE SEMICOLON

    LBRACE  shift, and go to state 206


State 200

   86 WhileBlock1: ID EQ ID WhileBinOp ID . SEMICOLON

    SEMICOLON  shift, and go to state 207


State 201

   87 WhileBlock1: ID EQ ID WhileBinOp NUMBER . SEMICOLON

    SEMICOLON  shift, and go to state 208


State 202

   90 WhileBlock2: ID EQ ID WhileBinOp . ID SEMICOLON
   91            | ID EQ ID WhileBinOp . NUMBER SEMICOLON

    ID      shift, and go to state 209
    NUMBER  shift, and go to state 210


State 203

   94 WhileBlock3: ID EQ ID . WhileBinOp ID SEMICOLON
   95            | ID EQ ID . WhileBinOp NUMBER SEMICOLON

    ADD       shift, and go to state 188
    SUB       shift, and go to state 189
    MULTIPLY  shift, and go to state 190
    DIV       shift, and go to state 191

    WhileBinOp  go to state 211


State 204

   96 WhileBlock3: WRITE ID SEMICOLON .

    $default  reduce using rule 96 (WhileBlock3)


State 205

   58 Write_stmt_for_ifs: WRITE ID LBRACKET NUMBER RBRACKET SEMICOLON .

    $default  reduce using rule 58 (Write_stmt_for_ifs)


State 206

   33 Condition: IF SUB ELSE LPAREN if_else_Condition_Stmt RPAREN LBRACE ConditionBlock RBRACE ELSE LBRACE . else_ConditionBlock RBRACE SEMICOLON

    ID      shift, and go to state 1
    WRITE   shift, and go to state 212
    IF      shift, and go to state 3
    TYPE    shift, and go to state 5
    NUMBER  shift, and go to state 6

    RBRACE    reduce using rule 9 (FunDeclList)
    RBRACE    [reduce using rule 64 (else_ConditionBlock)]
    $default  reduce using rule 9 (FunDeclList)

    FunDeclList          go to state 213
    FunDecl              go to state 11
    FuncallStmtList      go to state 214
    FuncallStmt          go to state 13
    ConditionList        go to state 215
    Condition            go to state 15
    else_ConditionBlock  go to state 216
    stmt_list_for_else   go to state 217
    stmt_for_else        go to state 218
    Write_stmt_for_else  go to state 219
    VarDeclList          go to state 220
    VarDecl              go to state 133
    ArrayDeclList        go to state 221
    ArrayDecl            go to state 135
    AssignStmtList       go to state 222
    AssignStmt           go to state 23
    MathStatList         go to state 223
    MathStat             go to state 27


State 207

   86 WhileBlock1: ID EQ ID WhileBinOp ID SEMICOLON .

    $default  reduce using rule 86 (WhileBlock1)


State 208

   87 WhileBlock1: ID EQ ID WhileBinOp NUMBER SEMICOLON .

    $default  reduce using rule 87 (WhileBlock1)


State 209

   90 WhileBlock2: ID EQ ID WhileBinOp ID . SEMICOLON

    SEMICOLON  shift, and go to state 224


State 210

   91 WhileBlock2: ID EQ ID WhileBinOp NUMBER . SEMICOLON

    SEMICOLON  shift, and go to state 225


State 211

   94 WhileBlock3: ID EQ ID WhileBinOp . ID SEMICOLON
   95            | ID EQ ID WhileBinOp . NUMBER SEMICOLON

    ID      shift, and go to state 226
    NUMBER  shift, and go to state 227


State 212

   71 Write_stmt_for_else: WRITE . ID SEMICOLON
   72                    | WRITE . ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID  shift, and go to state 228


State 213

   60 else_ConditionBlock: FunDeclList .

    $default  reduce using rule 60 (else_ConditionBlock)


State 214

   70 stmt_for_else: FuncallStmtList .

    $default  reduce using rule 70 (stmt_for_else)


State 215

   61 else_ConditionBlock: ConditionList .

    $default  reduce using rule 61 (else_ConditionBlock)


State 216

   33 Condition: IF SUB ELSE LPAREN if_else_Condition_Stmt RPAREN LBRACE ConditionBlock RBRACE ELSE LBRACE else_ConditionBlock . RBRACE SEMICOLON

    RBRACE  shift, and go to state 229


State 217

   59 else_ConditionBlock: stmt_list_for_else .
   65 stmt_list_for_else: stmt_list_for_else . stmt_for_else

    ID      shift, and go to state 1
    WRITE   shift, and go to state 212
    NUMBER  shift, and go to state 6

    $default  reduce using rule 59 (else_ConditionBlock)

    FuncallStmtList      go to state 214
    FuncallStmt          go to state 13
    stmt_for_else        go to state 230
    Write_stmt_for_else  go to state 219
    AssignStmtList       go to state 222
    AssignStmt           go to state 23
    MathStatList         go to state 223
    MathStat             go to state 27


State 218

   66 stmt_list_for_else: stmt_for_else .

    $default  reduce using rule 66 (stmt_list_for_else)


State 219

   69 stmt_for_else: Write_stmt_for_else .

    $default  reduce using rule 69 (stmt_for_else)


State 220

   62 else_ConditionBlock: VarDeclList .

    $default  reduce using rule 62 (else_ConditionBlock)


State 221

   63 else_ConditionBlock: ArrayDeclList .

    $default  reduce using rule 63 (else_ConditionBlock)


State 222

   67 stmt_for_else: AssignStmtList .

    $default  reduce using rule 67 (stmt_for_else)


State 223

   68 stmt_for_else: MathStatList .

    $default  reduce using rule 68 (stmt_for_else)


State 224

   90 WhileBlock2: ID EQ ID WhileBinOp ID SEMICOLON .

    $default  reduce using rule 90 (WhileBlock2)


State 225

   91 WhileBlock2: ID EQ ID WhileBinOp NUMBER SEMICOLON .

    $default  reduce using rule 91 (WhileBlock2)


State 226

   94 WhileBlock3: ID EQ ID WhileBinOp ID . SEMICOLON

    SEMICOLON  shift, and go to state 231


State 227

   95 WhileBlock3: ID EQ ID WhileBinOp NUMBER . SEMICOLON

    SEMICOLON  shift, and go to state 232


State 228

   71 Write_stmt_for_else: WRITE ID . SEMICOLON
   72                    | WRITE ID . LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 233
    LBRACKET   shift, and go to state 234


State 229

   33 Condition: IF SUB ELSE LPAREN if_else_Condition_Stmt RPAREN LBRACE ConditionBlock RBRACE ELSE LBRACE else_ConditionBlock RBRACE . SEMICOLON

    SEMICOLON  shift, and go to state 235


State 230

   65 stmt_list_for_else: stmt_list_for_else stmt_for_else .

    $default  reduce using rule 65 (stmt_list_for_else)


State 231

   94 WhileBlock3: ID EQ ID WhileBinOp ID SEMICOLON .

    $default  reduce using rule 94 (WhileBlock3)


State 232

   95 WhileBlock3: ID EQ ID WhileBinOp NUMBER SEMICOLON .

    $default  reduce using rule 95 (WhileBlock3)


State 233

   71 Write_stmt_for_else: WRITE ID SEMICOLON .

    $default  reduce using rule 71 (Write_stmt_for_else)


State 234

   72 Write_stmt_for_else: WRITE ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER  shift, and go to state 236


State 235

   33 Condition: IF SUB ELSE LPAREN if_else_Condition_Stmt RPAREN LBRACE ConditionBlock RBRACE ELSE LBRACE else_ConditionBlock RBRACE SEMICOLON .

    $default  reduce using rule 33 (Condition)


State 236

   72 Write_stmt_for_else: WRITE ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 237


State 237

   72 Write_stmt_for_else: WRITE ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 238


State 238

   72 Write_stmt_for_else: WRITE ID LBRACKET NUMBER RBRACKET SEMICOLON .

    $default  reduce using rule 72 (Write_stmt_for_else)
